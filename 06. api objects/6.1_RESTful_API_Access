---

### 🔹 **Step 1 – View Cluster Configuration**

```bash
kubectl config view
```

**Annotation**:  
This command displays the Kubernetes client configuration file, typically located at `~/.kube/config`. You're looking for the `server:` entry to identify the **API server's IP and port**.

---

### 🔹 **Step 2 – Create a Bearer Token**

```bash
export token=$(kubectl create token default)
```

**Annotation**:  
Generates a **short-lived Bearer token** for the `default` service account in the current namespace and assigns it to an environment variable `token`. This is needed for authenticating your curl requests to the Kubernetes API.

> ⚠️ Note: Token auto-creation is disabled in recent Kubernetes versions, so you explicitly generate one like this.

---

### 🔹 **Step 3 – List Available API Groups**

```bash
curl https://k8scp:6443/apis --header "Authorization: Bearer $token" -k
```

**Annotation**:  
Sends a **GET** request to the `/apis` endpoint using curl, passing the token in the `Authorization` header and the `-k` flag to **skip certificate verification** (insecure). This returns a list of API groups available on the cluster.

---

### 🔹 **Step 4 – Query Core API (v1)**

```bash
curl https://k8scp:6443/api/v1 --header "Authorization: Bearer $token" -k
```

**Annotation**:  
Sends a **GET** request to the core `/api/v1` endpoint (note the path difference from `/apis`). This shows the resources available in the **core API group**, such as pods, services, namespaces, etc.

---

### 🔹 **Step 5 – Attempt to List Namespaces**

```bash
curl https://k8scp:6443/api/v1/namespaces --header "Authorization: Bearer $token" -k
```

**Annotation**:  
Attempts to retrieve a list of all namespaces in the cluster. This will likely **fail** with a `403 Forbidden` error because the default service account doesn't have the required **RBAC permissions** to list namespaces.

> 💡 This shows how access to API resources is gated by RBAC policies.

---